version: '3'
services:

  client:
    # stdin_open: true
    build:
      dockerfile: Dockerfile
      context: .
    volumes:
        - /app/node_modules
        - .:/app
    ports:
      - "3000:3000"

# stdin_open: true를 설정하면 컨테이너 내부의 프로세스에 대해 표준 입력을 열어두게 되어, 
# 컨테이너 내에서 터미널 상호작용을 할 수 있게 됩니다.
#  ---------------------------------------------------

# version: '3'

# services:
#   nginx:
#     image: nginx:latest
#     volumes:
#       - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
#     ports:
#       - 80:80

#   # frontend:
#   #   build: ./client
#   #   container_name: minari_frontend
#   #   ports:
#   #     - 3000:3000
#   #   volumes:
#   #     - ./client:/app
#   #   depends_on:
#   #     - backend

#   backend:
#     container_name: backend_frontend
#     build:
#       context: .
#       dockerfile: Dockerfile
#     env_file:
#       - ./server/.env
#     ports:
#       - 5000:5000
#     volumes:
#       - ./client:/app/client
#       - ./server:/app/server
#     networks:
#       - nestjs_network

# networks:
#   nestjs_network:
#     driver: bridge


# https://bobcares.com/blog/install-bcrypt-in-docker/  bcrypt 호환성 해결책
# https://www.youtube.com/watch?v=mqI5ZcV3prI aws nest docker 해결 영상
# 로컬 git bash에 aws 우분투 연결하기 => find ~/OneDrive/Desktop/minari-bot -name "*.pem" 
# => ssh -i 키페어 주소 ubuntu@퍼블릭 주소
# https://choiblog.tistory.com/133 =>  Cannot find module '~~~~' or its corresponding type declarations. => 해결 블로그


# version: '3.7'

# services:
#   minari-backend:
#     build:
#       context: ./server
#       dockerfile: Dockerfile
#     volumes:
#       - ./server:/app
#       - /app/node_modules
#     env_file:
#       - ./server/.env
#     ports:
#       - 5000:5000
